// generated with ast extension for cup
// version 0.8
// 3/1/2020 0:13:50


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(IfNumConst IfNumConst);
    public void visit(Mulop Mulop);
    public void visit(IfAbstractMethodDeclarations IfAbstractMethodDeclarations);
    public void visit(Relop Relop);
    public void visit(DesignatorStatementOptions DesignatorStatementOptions);
    public void visit(ProgramDeclarationList ProgramDeclarationList);
    public void visit(FormParameterList FormParameterList);
    public void visit(StatementList StatementList);
    public void visit(MethodDeclarationList MethodDeclarationList);
    public void visit(Addop Addop);
    public void visit(IfNewArray IfNewArray);
    public void visit(ConstIdentifier ConstIdentifier);
    public void visit(IfExtends IfExtends);
    public void visit(ProgramDeclaration ProgramDeclaration);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(IfRelopExists IfRelopExists);
    public void visit(MethodTypeAndName MethodTypeAndName);
    public void visit(Designator Designator);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(ActParsList ActParsList);
    public void visit(ConstIdentifierList ConstIdentifierList);
    public void visit(IfDesignatorStatementExists IfDesignatorStatementExists);
    public void visit(IfConditionExists IfConditionExists);
    public void visit(BracketsIfArray BracketsIfArray);
    public void visit(VarDeclarationList VarDeclarationList);
    public void visit(Expr Expr);
    public void visit(ActPars ActPars);
    public void visit(AnyMethodDecl AnyMethodDecl);
    public void visit(VarIdentifierList VarIdentifierList);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(IfExprExists IfExprExists);
    public void visit(IfActParsExist IfActParsExist);
    public void visit(AbstractMethodDeclarationList AbstractMethodDeclarationList);
    public void visit(IfMethodDeclarations IfMethodDeclarations);
    public void visit(IfElseExists IfElseExists);
    public void visit(FormPars FormPars);
    public void visit(NoRelop NoRelop);
    public void visit(RelopExists RelopExists);
    public void visit(NotArray NotArray);
    public void visit(IsArray IsArray);
    public void visit(NoActParsExist NoActParsExist);
    public void visit(ParsExist ParsExist);
    public void visit(NoNumConst NoNumConst);
    public void visit(NumConstExists NumConstExists);
    public void visit(NoExpr NoExpr);
    public void visit(ExprExists ExprExists);
    public void visit(NoCondition NoCondition);
    public void visit(ConditionExists ConditionExists);
    public void visit(NoDesignatorStatement NoDesignatorStatement);
    public void visit(DesignatorStatementExists DesignatorStatementExists);
    public void visit(NoElse NoElse);
    public void visit(ElseExists ElseExists);
    public void visit(NoAMethodDecls NoAMethodDecls);
    public void visit(IfAMethodDecls IfAMethodDecls);
    public void visit(NoExtend NoExtend);
    public void visit(DoesExtend DoesExtend);
    public void visit(NoMethodDecls NoMethodDecls);
    public void visit(IfMethodDecls IfMethodDecls);
    public void visit(MulopMod MulopMod);
    public void visit(MulopDiv MulopDiv);
    public void visit(MulopMul MulopMul);
    public void visit(AddopMinus AddopMinus);
    public void visit(AddopPlus AddopPlus);
    public void visit(RelopLe RelopLe);
    public void visit(RelopLs RelopLs);
    public void visit(RelopGe RelopGe);
    public void visit(RelopGt RelopGt);
    public void visit(RelopDiff RelopDiff);
    public void visit(RelopSame RelopSame);
    public void visit(Assignop Assignop);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorOther FactorOther);
    public void visit(FactorBool FactorBool);
    public void visit(FactorChar FactorChar);
    public void visit(FactorNum FactorNum);
    public void visit(FactorDesig FactorDesig);
    public void visit(TermFactor TermFactor);
    public void visit(TermMulopFactor TermMulopFactor);
    public void visit(ExprAddopTerm ExprAddopTerm);
    public void visit(ExprMinusTerm ExprMinusTerm);
    public void visit(ExprTerm ExprTerm);
    public void visit(Type Type);
    public void visit(CondFact CondFact);
    public void visit(ConditionFact ConditionFact);
    public void visit(ConditionsTL ConditionsTL);
    public void visit(ConditionTerm ConditionTerm);
    public void visit(ConditionsL ConditionsL);
    public void visit(ActParExpr ActParExpr);
    public void visit(ActParams ActParams);
    public void visit(NoActPars NoActPars);
    public void visit(ActParsL ActParsL);
    public void visit(DesiOptDec DesiOptDec);
    public void visit(DesiOptInc DesiOptInc);
    public void visit(DesiOptActPars DesiOptActPars);
    public void visit(DesiOptAssignErr DesiOptAssignErr);
    public void visit(DesiOptAssign DesiOptAssign);
    public void visit(DesignatorExprLR DesignatorExprLR);
    public void visit(DesignatorExpr DesignatorExpr);
    public void visit(DesignatorLR DesignatorLR);
    public void visit(DesignatorIdent DesignatorIdent);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(StatementBlock StatementBlock);
    public void visit(StatementPrint StatementPrint);
    public void visit(StatementRead StatementRead);
    public void visit(StatementReturn StatementReturn);
    public void visit(StatementContinue StatementContinue);
    public void visit(StatementBreak StatementBreak);
    public void visit(StatementFor StatementFor);
    public void visit(StatementIf StatementIf);
    public void visit(StatementDesi StatementDesi);
    public void visit(NoStatements NoStatements);
    public void visit(Statements Statements);
    public void visit(ConstErr ConstErr);
    public void visit(ConstBool ConstBool);
    public void visit(ConstInt ConstInt);
    public void visit(ConstChar ConstChar);
    public void visit(ConstIdent ConstIdent);
    public void visit(ConstIdentifiers ConstIdentifiers);
    public void visit(ConstDecl ConstDecl);
    public void visit(AbstractMethodD AbstractMethodD);
    public void visit(BasicMethodD BasicMethodD);
    public void visit(AbstractMethodDecl AbstractMethodDecl);
    public void visit(AnyMethodDeclaration AnyMethodDeclaration);
    public void visit(AbstractMethodDeclarations AbstractMethodDeclarations);
    public void visit(AbstractClassDecl AbstractClassDecl);
    public void visit(ClassDecl ClassDecl);
    public void visit(WithoutBrackets WithoutBrackets);
    public void visit(WithBrackets WithBrackets);
    public void visit(VarIdentifier VarIdentifier);
    public void visit(VarIdent VarIdent);
    public void visit(VarIdentError2 VarIdentError2);
    public void visit(VarIdentError1 VarIdentError1);
    public void visit(VarIdentifiers VarIdentifiers);
    public void visit(VarDeclErr VarDeclErr);
    public void visit(VarDeclr VarDeclr);
    public void visit(NoVarDeclarations NoVarDeclarations);
    public void visit(VarDeclarations VarDeclarations);
    public void visit(FormalParameterDeclaration FormalParameterDeclaration);
    public void visit(FormalParamError2 FormalParamError2);
    public void visit(FormalParamError1 FormalParamError1);
    public void visit(OneFormalParameter OneFormalParameter);
    public void visit(FormalParameters FormalParameters);
    public void visit(NoFormalParameters NoFormalParameters);
    public void visit(FormalPars FormalPars);
    public void visit(MethodTypeVoid MethodTypeVoid);
    public void visit(MethodTypeCustom MethodTypeCustom);
    public void visit(MethodDecl MethodDecl);
    public void visit(NoMethodDeclaration NoMethodDeclaration);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(ErrorDeclaration ErrorDeclaration);
    public void visit(ClassDeclaration ClassDeclaration);
    public void visit(AbstractClassDeclaration AbstractClassDeclaration);
    public void visit(VarDeclaration VarDeclaration);
    public void visit(ConstDeclaration ConstDeclaration);
    public void visit(NoProgramDeclaration NoProgramDeclaration);
    public void visit(ProgramDeclarations ProgramDeclarations);
    public void visit(ProgramName ProgramName);
    public void visit(Program Program);

}
